<?phpdefined('BASEPATH') or exit('No direct script access allowed');class Employee extends CI_Controller{    function __construct()    {        parent::__construct();        $this->load->model('ProviderModel');	$this->load->model('QueryModel');        $this->load->library('session');                if($this->session->userdata('logged_in') == TRUE && $this->session->userdata('type')=='provider' && $this->session->userdata('subtype')=='employee') {             return 1;              }		else		{             $url = $this->uri->segment(1);            set_cookie('last_url_login',strtolower($url),'31536000');			echo "<script>window.open('".base_url()."login','_self')</script>"; 		}    }    public function index()    {         $id = $this->session->userdata('id');        if ($this->agent->is_mobile()) {        $data['content'] = 'employee/offer_list';        $this->load->view("template/template",$data);    }else{        $data['content'] = 'desktop/employee/offer_list';        $this->load->view("desktop/template/template",$data);    } }    public function fetch_data($page = 1) {    $per_page = 10; // Adjust the number of items per page as needed    $offset = ($page - 1) * $per_page;    $data['results'] = $this->ProviderModel->get_items($offset, $per_page,$user_id);    //$data['results'] = $this->ProviderModel->get_data($per_page, $offset);     $this->load->view('voucher_pagination_view', $data);    }    public function get_voucher_items($offset = 0, $limit = 20) {        $user_id = $this->session->userdata('id');        $items = $this->ProviderModel->get_items($offset, $limit,$user_id);        header('Content-Type: application/json');        echo json_encode($items);    }     public function create_response_file($res){      $file_path = 'response.txt';       if (!file_exists($file_path)) {         // Create the file if it doesn't exist        file_put_contents($file_path, '<?php' . PHP_EOL);        }        $new_php_code = $res . PHP_EOL;        // Append the code to the file        file_put_contents($file_path, $new_php_code, FILE_APPEND | LOCK_EX);    }    public function verify_voucher(){                $user = $this->session->userdata('id');        $condition = array('conditions' => array('id' => $user));        $userdata = $this->QueryModel->selectSingleRow('users',$condition);        $user_id = $userdata['provider_id'];        $voucher_code =  substr($_POST['qr_code'], 0, strpos( $_POST['qr_code'], ' '));//trim($_POST['qr_code'],"- 31");        $voucher = array('conditions' => ['voucher_code' => $voucher_code,'provider_id'=>$user_id]);        $voucher_data =$this->QueryModel->selectSingleRow('vouchers',$voucher);        $users_condition = array('conditions' => ['id' => $voucher_data['user_id']]);        $users_details =$this->QueryModel->selectSingleRow('users',$users_condition);        if(empty($voucher_data)){            $aaa='qr not valid';            $response['status'] = false;            $response['code'] = $voucher_code;            // $response['message']= lang('voucher_not_found');            $response['message']= lang('You are failed to charge voucher please try again later');            $response['url']= base_url('employee/scan_voucher/'.base64_encode(json_encode($response)));            echo json_encode($response);            $this->create_response_file(json_encode($response));            return;        }        $current_date = date("Y-m-d H:i:s");        if($voucher_data['status']=='unreedem'){            if($voucher_data['expire_date']> $current_date){                $offer = array('conditions' => ['id' => $voucher_data['offer_id']]);                $offer_data =$this->QueryModel->selectSingleRow('offer',$offer);                if($voucher_data['person_type']=='adult' || $voucher_data['person_type']=='ticket'){                    if($offer_data['adult_discount']!=0){                        $adult_price=$offer_data['adult_discount'];                    }else{                        $adult_price=  $offer_data['adult_price'];                    }                    $total_price = $adult_price;                    $affiliator_commision = $total_price / 100 * 5;                    $total_comission = $offer_data['adult_commission'];                    $admin_comission =$total_comission - $affiliator_commision;                    $final_amount = $total_price - $total_comission;                }else{                    if($offer_data['child_discount']!=0){                        $child_price=$offer_data['child_discount'];                    }else{                        $child_price=  $offer_data['child_price'];                    }                    $total_price = $child_price;                    $affiliator_commision = $total_price / 100 * 5;                    $total_comission = $offer_data['child_commission'];                    $admin_comission =$total_comission - $affiliator_commision;                    $final_amount = $total_price - $total_comission;                }                $transation = array(                     'user_id' => $user_id,                    'offer_detail'=>$offer_data['name'],                    'currency_type'=>$offer_data['currency_type'],                    'comission' => $admin_comission,                    'amount' => $final_amount,                    'voucher_code'=>$voucher_code,                    'affialiator_commission' => $affiliator_commision                );                $this->QueryModel->insert('transation',$transation);                $provider_condition = array('conditions' => ['id' => $user_id]);                $provider_details =$this->QueryModel->selectSingleRow('users',$provider_condition);                $mail_data['type']='provider';                $mail_data['earning']=$final_amount;                $mail_data['offer_name']= $offer_data['name'];                $mail_data['offer_price']= $total_price;                send_mail_new_other($provider_details['email'], 'Holider', $this->load->view('verify_voucher_email_template', $mail_data, true));                if(!empty($voucher_data['affilator_id'])){                    $transation_affialiator = array(                         'user_id' => $voucher_data['affilator_id'],                        'offer_detail'=>$offer_data['name'],                        'currency_type'=>$offer_data['currency_type'],                        'comission' => 0,                        'amount' => $affiliator_commision,                        'voucher_code'=>$voucher_code,                        'affialiator_commission' => 0,                        'transaction_nature' =>'commision',                    );                    $this->QueryModel->insert('transation',$transation_affialiator);                    $affiliate_condition = array('conditions' => ['id' => $voucher_data['affilator_id']]);                    $affiliate_details =$this->QueryModel->selectSingleRow('users',$affiliate_condition);                    $mail_data['type']='afiliator';                    $mail_data['earning']=$affiliator_commision;                    $mail_data['offer_name']= $offer_data['name'];                    $mail_data['offer_price']= $total_price;                    send_mail_new_other($affiliate_details['email'], 'Holider', $this->load->view('verify_voucher_email_template', $mail_data, true));                }                $aaa='valid';                $response['status'] = true;                $response['code'] = $aaa;                $response['message']= lang('you_successfully_redeemed_your_voucher');                $response['url']= base_url('employee/scan_voucher/'.base64_encode(json_encode($response)));                $condition = array('id' => $voucher_data['id']);                $updateValue = array(                    'status' => 'reedem',                    'redeem_by' => $user                );                $updateRes = $this->QueryModel->update('vouchers',$condition,$updateValue);            }else{                $aaa='reedem';                $response['status'] = false;                $response['message']= lang('this_voucher_is_expired');                $response['code'] = $aaa;                $response['url']= base_url('employee/scan_voucher/'.base64_encode(json_encode($response)));            }        }else{            $aaa='reedem';            $response['status'] = false;            $response['message']= lang('this_voucher_already_used');            $response['code'] = $aaa;            $response['url']= base_url('employee/scan_voucher/'.base64_encode(json_encode($response)));                 }                // $this->scan_voucher(json_encode($response));        echo json_encode($response);                  $this->create_response_file(json_encode($response));        return;    }    public function verify_nfc_voucher(){                $user = $this->session->userdata('id');        $condition = array('conditions' => array('id' => $user));        $userdata = $this->QueryModel->selectSingleRow('users',$condition);        $user_id = $userdata['provider_id'];        $voucher_code =  $_POST['qr_code'];        $voucher = array('conditions' => ['voucher_code' => $voucher_code,'provider_id'=>$user_id]);        $voucher_data =$this->QueryModel->selectSingleRow('vouchers',$voucher);        if(empty($voucher_data)){            $aaa='qr not valid';            $response['status'] = false;            $response['code'] = $voucher_code;            $response['message']= lang('not_found_voucher');            $response['url']= base_url('employee/scan_voucher/'.base64_encode(json_encode($response)));             echo json_encode($response);            $this->create_response_file(json_encode($response));                        return;        }        $current_date = date("Y-m-d H:i:s");        if($voucher_data['status']=='unreedem'){            if($voucher_data['expire_date']> $current_date){                $offer = array('conditions' => ['id' => $voucher_data['offer_id']]);                $offer_data =$this->QueryModel->selectSingleRow('offer',$offer);                if($voucher_data['person_type']=='parrent'){                    if($offer_data['adult_discount']!=0){                                                $adult_price=$offer_data['adult_discount'];                    }else{                        $adult_price=  $offer_data['adult_price'];                    }                    $total_price = $adult_price;                    $total_comission = $offer_data['adult_commission'];                    $final_amount = $total_price - $total_comission;                    $affiliator_commision = $total_price / 100 * 5;                    $admin_comission =$total_comission - $affiliator_commision;                    // $final_amount = $total_price - $total_comission;                }else{                    if($offer_data['child_discount']!=0){                                                $child_price=$offer_data['child_discount'];                    }else{                        $child_price=  $offer_data['child_price'];                    }                    $total_price = $child_price;                    $total_comission = $offer_data['child_commission'];                    // $final_amount = $total_price - $total_comission;                    $affiliator_commision = $total_price / 100 * 5;                    // $total_comission = $offer_data['child_commission'];                    $admin_comission =$total_comission - $affiliator_commision;                    $final_amount = $total_price - $total_comission;                }                $transation = array(                     'user_id' => $user_id,                    'offer_detail'=>$offer_data['name'],                    'currency_type'=>$offer_data['currency_type'],                    'comission' => $admin_comission,                    'amount' => $final_amount,                    'voucher_code'=>$voucher_code,                    'affialiator_commission' => $affiliator_commision                );                $this->QueryModel->insert('transation',$transation);                if(!empty($voucher_data['affilator_id'])){                    $transation_affialiator = array(                         'user_id' => $voucher_data['affilator_id'],                        'offer_detail'=>$offer_data['name'],                        'currency_type'=>$offer_data['currency_type'],                        'comission' => 0,                        'amount' => $affiliator_commision,                        'voucher_code'=>$voucher_code,                        'affialiator_commission' => 0,                        'transaction_nature' =>'commision',                        );                    $this->QueryModel->insert('transation',$transation_affialiator);                }                $aaa='valid';                // $response['url']= base_url('provider/scan_voucher/1');                $response['status'] = true;                $response['code'] = $aaa;                $response['message']=  lang('voucher_is_now_charged');                $response['url']= base_url('employee/scan_voucher/'.base64_encode(json_encode($response)));                            $condition = array('id' => $voucher_data['id']);                $updateValue = array(                    'status' => 'reedem',                    'redeem_by' => $user,                    'voucher_reader'=>'ncfreader',                );                $updateRes = $this->QueryModel->update('vouchers',$condition,$updateValue);            }else{                $aaa='reedem';            $response['status'] = false;            $response['message']= lang('this_voucher_is_expired');            $response['code'] = $aaa;            $response['url']= base_url('employee/scan_voucher/'.base64_encode(json_encode($response)));            }        }else{            $aaa='reedem';            $response['status'] = false;            $response['message']= lang('this_voucher_already_ used');            $response['code'] = $aaa;            $response['url']= base_url('employee/scan_voucher/'.base64_encode(json_encode($response)));                 }                // $this->scan_voucher(json_encode($response));        echo json_encode($response);                  $this->create_response_file(json_encode($response));        return;    }    public function scan_voucher($status)    {          $response_data = base64_decode($status);        $response = json_decode($response_data);        // print_r($response);exit;        $data['status']= $response->status;//$_POST['status'];        $data['message']= $response->message;//$_POST['status'];        $data['content'] = 'employee/qr';        $this->load->view("template/template",$data);    }    // public function getVoucher_detail($id)    // {    //     $user_id = $this->session->userdata('id');    //     $user_cond = array('conditions' => ['id' => $user_id]);    //     $data['user'] =$this->ProviderModel->selectSingleRow('users',$user_cond);    //     $condition = array('conditions' => ['id' => $id]);    //     $voucher = $this->ProviderModel->selectSingleRow('vouchers',$condition);    //     $data['voucher'] = $voucher;    //     $condition_offer = array('conditions' => ['id' => $voucher['offer_id']]);    //     $data['offer'] =$this->ProviderModel->selectSingleRow('offer',$condition);    //     $data['content'] = 'provider/voucher-detail';    //     $this->load->view("template/template",$data);    // }    public function voucher_detail_ajax()    {        $url_slug = fetcharea();        $id = $_POST['id'];        $response['status'] = true;        $response['url'] = base_url('employee/getVoucher_detail/'.$id.'');        echo json_encode($response);        return;    }    public function getVoucher_detail($id)    {        $user = $this->session->userdata('id');        $condition = array('conditions' => array('id' => $user));        $userdata = $this->QueryModel->selectSingleRow('users',$condition);        $user_id = $userdata['provider_id'];        $user_cond = array('conditions' => ['id' => $user_id]);        $data['user'] =$this->ProviderModel->selectSingleRow('users',$user_cond);        $condition = array('conditions' => ['id' => $id]);        $voucher = $this->ProviderModel->selectSingleRow('vouchers',$condition);        $data['voucher'] = $voucher;        $condition_offer = array('conditions' => ['id' => $voucher['offer_id']]);        $data['offer'] =$this->ProviderModel->selectSingleRow('offer',$condition);        $data['content'] = 'provider/voucher-detail';        $this->load->view("template/template",$data);    }      public function open_offer()    {        $data['choose_offer_data'] = $this->ProviderModel->selectData('offer');        $data['content'] = 'provider/choose-offer';        $this->load->view("template/template",$data);    }    public function checkDeviceWithVoucher($serialNumber){       $user_id = $this->session->userdata('id');       $condition = array('conditions' => array('id' => $user_id));       $userdata = $this->QueryModel->selectSingleRow('users',$condition);       $provider_id = $userdata['provider_id'];       $nfcDeviceData = $this->ProviderModel->getDeviceData($serialNumber);       if(!empty($nfcDeviceData)){         $userDevice = $this->ProviderModel->getUSerDeviceExist($serialNumber,$nfcDeviceData->user_id);         if(!empty($userDevice)){           $voucherList = $this->ProviderModel->getUserVoucherList($provider_id,$nfcDeviceData->user_id);           if(!empty($voucherList)){               $response['status'] = true;               $response['message']= lang('device_scan_sucessfully');               $response['data']=  $voucherList;           }else{               $response['status'] = false;               $response['message']= lang('voucher_does_not_exist_for_the_user.');               $response['data']=  [];           }                    }else{           $response['status'] = true;           $response['message']= lang('user_device_does_not_exist');           $response['data']=  [];         }       }else{           $response['status'] = false;           $response['message']= lang('device_does_not_exist');           $response['data']=  [];       }       echo json_encode($response);       return;    }	public function profile()	{		$id = $this->session->userdata('id');		$condition = array('conditions' => ['id' => $id]);		$data['userDetail'] = $this->QueryModel->selectSingleRow('users',$condition);		if ($this->agent->is_mobile()) {			$data['content'] = 'profile';			$this->load->view("template/template",$data);        }else{			$data['content'] = 'desktop/profile';			$this->load->view("desktop/template/template",$data);        }	}	public function edit_profile()	{		$id = $this->session->userdata('id');		$condition = array('id' => $id);				$this->form_validation->set_rules('editName', 'Name', 'trim|required');		$this->form_validation->set_rules('editEmail', 'Email', 'trim|required|valid_email');		//$this->form_validation->set_rules('editPhone', 'Phone', 'trim|required');		if ($this->form_validation->run() === TRUE) {			$name = $this->input->post('editName');			$email = $this->input->post('editEmail');			//$phone = $this->input->post('editPhone');			$updateData = array(				'name' => $name,				'email' => $email,				//'phone' => $phone			);			$update = $this->QueryModel->update('users',$condition,$updateData);			$userCondition = array('conditions' => ['id' => $id]);			$userDetail = $this->QueryModel->selectSingleRow('users',$userCondition);			$sesdata = array(				'id'		=> $userDetail['id'],				'name'      => $userDetail['name'],				'type' => $userDetail['type'],				'subtype'=> $userDetail['subtype'],				'logged_in' => TRUE,			);			$this->session->set_userdata($sesdata);			redirect('employee/profile', 'refresh'); 		}		$this->load->view('desktop/profile');				}}